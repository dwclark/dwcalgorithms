(in-package #:dwcalgorithms)

(5am:def-suite search-suite :description "Search Test Suite")
(5am:in-suite search-suite)

(5am:test test-linear-search
  (let ((vec (make-instance 'comparable-array :ary (vector 1 2 3 4 5 6 7))))
    (5am:is (= 3 (search vec 3)))
    (5am:is (null (search vec 19))))
  (let* ((ary (random-num-array 100 500))
	 (vec2 (make-instance 'comparable-array :ary ary)))
    (5am:is (not (null (search vec2 (aref ary 77)))))))

(5am:test test-binary-search
  (let ((vec (make-instance 'sorted-array :ary (vector 1 2 3 4 5 6 7))))
    (5am:is (= 4 (search vec 4)))
    (5am:is (null (search vec 0)))
    (5am:is (null (search vec 10))))
  (let* ((ary (random-string-array 300 20))
	 (vec2 (make-instance 'sorted-array :ary ary)))
    (5am:is (sorted? (ary vec2)))
    (5am:is (equal (aref ary 100) (search vec2 (aref ary 100))))
    (5am:is (null (search vec2 "blah")))))

(5am:test test-sorted-array
  (let ((cmpary (make-instance 'sorted-array)))
    (loop for element in (list 1 5 2 9 10 23 100 7 150 99)
       do (progn
	    (insert cmpary element)
	    (5am:is (sorted? (ary cmpary)))))
    (5am:is (= 5 (search cmpary 5)))
    (5am:is (null (search cmpary 300)))
    (5am:is (= 1 (minimum cmpary)))
    (5am:is (= 150 (maximum cmpary)))
    (5am:is (= 150 (successor cmpary 100)))
    (5am:is (= 2 (successor cmpary 1)))
    (5am:is (null (successor cmpary 150)))
    (5am:is (= 99 (predecessor cmpary 100)))
    (5am:is (= 1 (predecessor cmpary 2)))
    (5am:is (null (predecessor cmpary 1)))
    (delete cmpary 5)
    (delete cmpary 100)
    (5am:is (sorted? (ary cmpary)))
    (5am:is (null (search cmpary 5)))
    (5am:is (null (search cmpary 100)))
    (5am:is (= 7 (search cmpary 7)))))

(5am:test test-comparable-array
  (let ((cmpary (make-instance 'comparable-array)))
    (loop for element in (list 1 5 2 9 10 23 100 7 150 99)
       do (insert cmpary element))
    (5am:is (= 5 (search cmpary 5)))
    (5am:is (null (search cmpary 300)))
    (5am:is (= 1 (minimum cmpary)))
    (5am:is (= 150 (maximum cmpary)))
    (5am:is (= 150 (successor cmpary 100)))
    (5am:is (= 2 (successor cmpary 1)))
    (5am:is (null (successor cmpary 150)))
    (5am:is (= 99 (predecessor cmpary 100)))
    (5am:is (= 1 (predecessor cmpary 2)))
    (5am:is (null (predecessor cmpary 1)))
    (delete cmpary 5)
    (delete cmpary 100)
    (5am:is (null (search cmpary 5)))
    (5am:is (null (search cmpary 100)))
    (5am:is (= 7 (search cmpary 7)))))

(5am:test test-sorted-array-set
  (let ((set (make-instance 'sorted-array-set :ary (vector 1 2 3 3 3 4 5))))
    (5am:is (= 5 (size set)))
    (insert set 5)
    (5am:is (= 5 (size set)))))

(5am:test test-sorted-map
  (let ((map (make-instance 'sorted-map :ary (vector (cons 1 "one") (cons 5 "five") (cons 3 "three")
						     (cons 2 "two") (cons 4 "four") (cons 1 "one")))))
    (5am:is (= 5 (size map)))
    (setf ([] map 7) "seven")
    (5am:is (equal "seven" ([] map 7)))
    (setf ([] map 7) "iv")
    (5am:is (equal "iv" ([] map 7)))
    (5am:is (= 6 (size map)))))

(5am:test test-kth
  (let ((cmpvec (make-instance 'comparable-array :ary (vector 5 3 1 2 4 9 7 8 6 10)))
	(srtvec (make-instance 'sorted-array :ary (vector 5 3 1 2 4 9 7 8 6 10))))
    (5am:is (= 5 (kth cmpvec 5)))
    (5am:is (= 5 (median cmpvec)))
    (5am:is (= 5 (median srtvec)))
    (5am:is (= 7 (kth cmpvec 7)))
    (5am:is (= 7 (kth srtvec 7)))))
